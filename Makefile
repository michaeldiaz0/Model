
HAS_MPI=TRUE

# set these paths
NETCDF_PATH=/usr/local
FFTW_PATH=/usr/local
MPI_PATH=/usr/local
FORTRAN_LIB=/usr/local/gfortran/lib

# output binary
BIN := bin/solve.exe

# include files
NETCDF_INCLUDE=$(NETCDF_PATH)/include
FFTW_INCLUDE=$(FFTW_PATH)/include
MPI_INCLUDE=$(MPI_PATH)/include
LOCAL_INCLUDE=include

# LIB FILES
NETCDF_LIB=$(NETCDF_PATH)/lib
FFTW_LIB=$(FFTW_PATH)/lib
MPI_LIB=$(MPI_PATH)/lib

# source directory
SRCDIR := source

# external physics
SRCDIR_EXT := ext_physics

# source files

ifeq ($(HAS_MPI),TRUE)

SRCS := \
    main.cpp solver.cpp initializer.cpp data_initializer.cpp \
   	interpolate.cpp fluxes.cpp pressure.cpp advection.cpp turbulence.cpp damping.cpp boundaries.cpp \
   	files.cpp util.cpp Heating.cpp kessler.cpp rutledge.cpp microphysics.cpp energy.cpp \
   	thompson.cpp trajectory.cpp laplacian.cpp process_input.cpp driver_serial.cpp \
	 driver_parallel.cpp budgets.cpp pcomm.cpp ensemble.cpp mpi_setup.cpp

else

SRCS := \
    main.cpp solver.cpp initializer.cpp data_initializer.cpp \
   	interpolate.cpp fluxes.cpp pressure.cpp advection.cpp turbulence.cpp damping.cpp boundaries.cpp \
   	files.cpp util.cpp Heating.cpp kessler.cpp rutledge.cpp microphysics.cpp energy.cpp \
   	thompson.cpp trajectory.cpp laplacian.cpp process_input.cpp \
	driver_serial.cpp
	 
endif

SRCS_EXT := \
	module_mp_thompson.F90 module_mp_radar.F90

#SRCS = $(patsubst %,$(SRCDIR)/%,$(_SRCS))

#SRCS_EXT = $(patsubst %,$(SRCDIR_EXT)/%,$(_SRCS_EXT))

# files included in the tarball generated by 'make dist' (e.g. add LICENSE file)
DISTFILES := $(BIN)

# filename of the tar archive generated by 'make dist'
DISTOUTPUT := $(BIN).tar.gz

# intermediate directory for generated object files
OBJDIR := objs
# intermediate directory for generated dependency files
DEPDIR := deps

# object files, auto generated from source files
OBJS := $(patsubst %,$(OBJDIR)/%.o,$(basename $(SRCS)))
F_OBJS := $(patsubst %,$(OBJDIR)/%.o,$(basename $(SRCS_EXT)))
# dependency files, auto generated from source files
DEPS := $(patsubst %,$(DEPDIR)/%.d,$(basename $(SRCS)))

# compilers (at least gcc and clang) don't create the subdirectories automatically
$(shell mkdir -p $(dir $(OBJS)) >/dev/null)
$(shell mkdir -p $(dir $(DEPS)) >/dev/null)

# C++ compiler
ifeq ($(HAS_MPI),TRUE)
CXX := mpicc
else
CXX := g++
endif
# Fortran compiler
FC := gfortran
# linker
LD := ld
# tar
TAR := tar
# -Wall -Wextra

# Fortran flags
FFLAGS := -O3

# C/C++ flags
ifeq ($(HAS_MPI),TRUE)
CPPFLAGS := -g -O3 -I $(LOCAL_INCLUDE) -I $(NETCDF_INCLUDE) -I $(FFTW_INCLUDE) -I $(MPI_INCLUDE)
else
CPPFLAGS := -g -O3 -I $(LOCAL_INCLUDE) -I $(NETCDF_INCLUDE) -I $(FFTW_INCLUDE)
endif

# linker flags: libraries to link (e.g. -lfoo)
ifeq ($(HAS_MPI),TRUE)
LDLIBS := -L $(NETCDF_LIB) -lnetcdf -L $(FFTW_LIB) -lfftw3 -L $(MPI_LIB) -lmpi  -lm
else
LDLIBS := -L $(NETCDF_LIB) -lnetcdf -L $(FFTW_LIB) -lfftw3 -lm
endif

F_LDLIBS := -L$(FORTRAN_LIB) -lgfortran

# flags required for dependency generation; passed to compilers
DEPFLAGS = -MT $@ -MD -MP -MF $(DEPDIR)/$*.Td

# compile C++ source files
COMPILE.cc = $(CXX) $(DEPFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c -o $@
# compile Fortran source files
COMPILE.f = $(FC) $(FFLAGS) -c -o $@
# link object files to binary
LINK.o = $(F_LDLIBS) $(LDLIBS) -o $@
# precompile step
PRECOMPILE =
# postcompile step
POSTCOMPILE = mv -f $(DEPDIR)/$*.Td $(DEPDIR)/$*.d

all: $(BIN)

dist: $(DISTFILES)
	$(TAR) -cvzf $(DISTOUTPUT) $^

.PHONY: clean
clean:
	$(RM) -r $(OBJDIR) $(DEPDIR)

.PHONY: distclean
distclean: clean
	$(RM) $(BIN) $(DISTOUTPUT)

.PHONY: check
check:

.PHONY: help
help:
	@echo available targets: all dist clean distclean check

$(BIN): $(OBJS) $(F_OBJS)
	@echo ""
	$(CXX) $(LIBFLAGS) -o $(BIN) $(LINK.o) $^
#$(LINK.o) $^

$(OBJDIR)/%.o: $(SRCDIR_EXT)/%.F90
	@echo ""
	$(COMPILE.f) $<

$(OBJDIR)/%.o:$(SRCDIR)/%.cpp
$(OBJDIR)/%.o:$(SRCDIR)/%.cpp $(DEPDIR)/%.d
	@echo ""
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)

.PRECIOUS: $(DEPDIR)/%.d
$(DEPDIR)/%.d: ;

-include $(DEPS)
